/* The following code was generated by JFlex 1.6.1 */

package br.com.arthurrso.lexicalanalyzer;


import java_cup.runtime.*;
import java_cup.runtime.Sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/arthur.r.oliveira/Documents/UFCG/compiladores/src/main/java/br/com/arthurrso/lexicalanalyzer/language.lex</tt>
 */
public class Lexical implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\4\1\3\1\104\1\105\1\2\16\6\4\0\1\4\1\70"+
    "\1\102\1\0\1\5\1\100\1\74\1\103\1\55\1\56\1\10\1\76"+
    "\1\64\1\23\1\21\1\7\1\11\1\20\2\16\4\17\2\12\1\73"+
    "\1\63\1\67\1\65\1\66\1\72\1\0\3\15\1\101\1\22\1\101"+
    "\5\5\1\13\6\5\1\54\4\5\1\14\2\5\1\61\1\1\1\62"+
    "\1\77\1\5\1\0\1\26\1\43\1\24\1\34\1\30\1\41\1\51"+
    "\1\47\1\35\1\5\1\44\1\25\1\36\1\33\1\45\1\37\1\5"+
    "\1\40\1\27\1\32\1\46\1\52\1\42\1\31\1\50\1\53\1\57"+
    "\1\75\1\60\1\71\6\6\1\106\32\6\2\0\4\5\4\0\1\5"+
    "\2\0\1\6\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5"+
    "\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5"+
    "\21\0\160\6\5\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0"+
    "\3\5\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\1\0"+
    "\5\6\2\0\236\5\11\0\46\5\2\0\1\5\7\0\47\5\7\0"+
    "\1\5\1\0\55\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\6\10\0\33\5\5\0\3\5\15\0\5\6\6\0\1\5\4\0"+
    "\13\6\5\0\53\5\37\6\4\0\2\5\1\6\143\5\1\0\1\5"+
    "\10\6\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6\3\5"+
    "\2\0\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0\131\5"+
    "\13\6\1\5\16\0\12\6\41\5\11\6\2\5\4\0\1\5\5\0"+
    "\26\5\4\6\1\5\11\6\1\5\3\6\1\5\5\6\22\0\31\5"+
    "\3\6\104\0\1\5\1\0\13\5\67\0\33\6\1\0\4\6\66\5"+
    "\3\6\1\5\22\6\1\5\7\6\12\5\2\6\2\0\12\6\1\0"+
    "\7\5\1\0\7\5\1\0\3\6\1\0\10\5\2\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5"+
    "\7\6\2\0\2\6\2\0\3\6\1\5\10\0\1\6\4\0\2\5"+
    "\1\0\3\5\2\6\2\0\12\6\4\5\7\0\1\5\5\0\3\6"+
    "\1\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6"+
    "\2\0\3\6\3\0\1\6\7\0\4\5\1\0\1\5\7\0\14\6"+
    "\3\5\1\6\13\0\3\6\1\0\11\5\1\0\3\5\1\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\10\6"+
    "\1\0\3\6\1\0\3\6\2\0\1\5\17\0\2\5\2\6\2\0"+
    "\12\6\1\0\1\5\17\0\3\6\1\0\10\5\2\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5"+
    "\7\6\2\0\2\6\2\0\3\6\10\0\2\6\4\0\2\5\1\0"+
    "\3\5\2\6\2\0\12\6\1\0\1\5\20\0\1\6\1\5\1\0"+
    "\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0"+
    "\2\5\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\6\3\0"+
    "\3\6\1\0\4\6\2\0\1\5\6\0\1\6\16\0\12\6\11\0"+
    "\1\5\7\0\3\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\3\0\1\5\7\6\1\0\3\6\1\0\4\6"+
    "\7\0\2\6\1\0\2\5\6\0\2\5\2\6\2\0\12\6\22\0"+
    "\2\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"+
    "\5\5\2\0\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\7\0\1\5\1\0\2\5\2\6\2\0\12\6\1\0\2\5"+
    "\17\0\2\6\1\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5"+
    "\7\6\1\0\3\6\1\0\4\6\1\5\10\0\1\6\10\0\2\5"+
    "\2\6\2\0\12\6\12\0\6\5\2\0\2\6\1\0\22\5\3\0"+
    "\30\5\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0"+
    "\6\6\1\0\1\6\1\0\10\6\22\0\2\6\15\0\60\5\1\6"+
    "\2\5\7\6\4\0\10\5\10\6\1\0\12\6\47\0\2\5\1\0"+
    "\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0"+
    "\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0"+
    "\4\5\1\6\2\5\6\6\1\0\2\6\1\5\2\0\5\5\1\0"+
    "\1\5\1\0\6\6\2\0\12\6\2\0\4\5\40\0\1\5\27\0"+
    "\2\6\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\10\5\1\0\44\5\4\0\24\6\1\0\2\6\5\5\13\6"+
    "\1\0\44\6\11\0\1\6\71\0\53\5\24\6\1\5\12\6\6\0"+
    "\6\5\4\6\4\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6"+
    "\15\5\14\6\1\5\17\6\2\0\46\5\1\0\1\5\5\0\1\5"+
    "\2\0\53\5\1\0\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5"+
    "\2\0\7\5\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5"+
    "\1\0\4\5\2\0\103\5\2\0\3\6\40\0\20\5\20\0\125\5"+
    "\14\0\u026c\5\2\0\21\5\1\0\32\5\5\0\113\5\3\0\3\5"+
    "\17\0\15\5\1\0\4\5\3\6\13\0\22\5\3\6\13\0\22\5"+
    "\2\6\14\0\15\5\1\0\3\5\1\0\2\6\14\0\64\5\40\6"+
    "\3\0\1\5\3\0\2\5\1\6\2\0\12\6\41\0\3\6\2\0"+
    "\12\6\6\0\130\5\10\0\51\5\1\6\1\5\5\0\106\5\12\0"+
    "\35\5\3\0\14\6\4\0\14\6\12\0\12\6\36\5\2\0\5\5"+
    "\13\0\54\5\4\0\21\6\7\5\2\6\6\0\12\6\46\0\27\5"+
    "\5\6\4\0\65\5\12\6\1\0\35\6\2\0\13\6\6\0\12\6"+
    "\15\0\1\5\130\0\5\6\57\5\21\6\7\5\4\0\12\6\21\0"+
    "\11\6\14\0\3\6\36\5\15\6\2\5\12\6\54\5\16\6\14\0"+
    "\44\5\24\6\10\0\12\6\3\0\3\5\12\6\44\5\122\0\3\6"+
    "\1\0\25\6\4\5\1\6\4\5\3\6\2\5\11\0\300\5\47\6"+
    "\25\0\4\6\u0116\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0"+
    "\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0"+
    "\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0"+
    "\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\16\0"+
    "\5\6\30\0\1\104\1\104\5\6\20\0\2\5\23\0\1\5\13\0"+
    "\5\6\5\0\6\6\1\0\1\5\15\0\1\5\20\0\15\5\3\0"+
    "\33\5\25\0\15\6\4\0\1\6\3\0\14\6\21\0\1\5\4\0"+
    "\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5\5\0"+
    "\5\5\4\0\1\5\21\0\51\5\u0a77\0\57\5\1\0\57\5\1\0"+
    "\205\5\6\0\4\5\3\6\2\5\14\0\46\5\1\0\1\5\5\0"+
    "\1\5\2\0\70\5\7\0\1\5\17\0\1\6\27\5\11\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\40\6\57\0\1\5\u01d5\0\3\5"+
    "\31\0\11\5\6\6\1\0\5\5\2\0\5\5\4\0\126\5\2\0"+
    "\2\6\2\0\3\5\1\0\132\5\1\0\4\5\5\0\51\5\3\0"+
    "\136\5\21\0\33\5\65\0\20\5\u0200\0\u19b6\5\112\0\u51cd\5\63\0"+
    "\u048d\5\103\0\56\5\2\0\u010d\5\3\0\20\5\12\6\2\5\24\0"+
    "\57\5\1\6\4\0\12\6\1\0\31\5\7\0\1\6\120\5\2\6"+
    "\45\0\11\5\2\0\147\5\2\0\4\5\1\0\4\5\14\0\13\5"+
    "\115\0\12\5\1\6\3\5\1\6\4\5\1\6\27\5\5\6\20\0"+
    "\1\5\7\0\64\5\14\0\2\6\62\5\21\6\13\0\12\6\6\0"+
    "\22\6\6\5\3\0\1\5\4\0\12\6\34\5\10\6\2\0\27\5"+
    "\15\6\14\0\35\5\3\0\4\6\57\5\16\6\16\0\1\5\12\6"+
    "\46\0\51\5\16\6\11\0\3\5\1\6\10\5\2\6\2\0\12\6"+
    "\6\0\27\5\3\0\1\5\1\6\4\0\60\5\1\6\1\5\3\6"+
    "\2\5\2\6\5\5\2\6\1\5\1\6\1\5\30\0\3\5\2\0"+
    "\13\5\5\6\2\0\3\5\2\6\12\0\6\5\2\0\6\5\2\0"+
    "\6\5\11\0\7\5\1\0\7\5\221\0\43\5\10\6\1\0\2\6"+
    "\2\0\12\6\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u016e\5"+
    "\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\6\12\5"+
    "\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5"+
    "\3\0\20\6\20\0\7\6\14\0\2\5\30\0\3\5\31\0\1\5"+
    "\6\0\5\5\1\0\207\5\2\0\1\6\4\0\1\5\13\0\12\6"+
    "\7\0\32\5\4\0\1\5\1\0\32\5\13\0\131\5\3\0\6\5"+
    "\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5\3\0\2\5"+
    "\22\0\3\6\4\0\14\5\1\0\32\5\1\0\23\5\1\0\2\5"+
    "\1\0\17\5\2\0\16\5\42\0\173\5\105\0\65\5\210\0\1\6"+
    "\202\0\35\5\3\0\61\5\57\0\37\5\21\0\33\5\65\0\36\5"+
    "\2\0\44\5\4\0\10\5\1\0\5\5\52\0\236\5\2\0\12\6"+
    "\u0356\0\6\5\2\0\1\5\1\0\54\5\1\0\2\5\3\0\1\5"+
    "\2\0\27\5\252\0\26\5\12\0\32\5\106\0\70\5\6\0\2\5"+
    "\100\0\1\5\3\6\1\0\2\6\5\0\4\6\4\5\1\0\3\5"+
    "\1\0\33\5\4\0\3\6\4\0\1\6\40\0\35\5\203\0\66\5"+
    "\12\0\26\5\12\0\23\5\215\0\111\5\u03b7\0\3\6\65\5\17\6"+
    "\37\0\12\6\20\0\3\6\55\5\13\6\2\0\1\6\22\0\31\5"+
    "\7\0\12\6\6\0\3\6\44\5\16\6\1\0\12\6\100\0\3\6"+
    "\60\5\16\6\4\5\13\0\12\6\u04a6\0\53\5\15\6\10\0\12\6"+
    "\u0936\0\u036f\5\221\0\143\5\u0b9d\0\u042f\5\u33d1\0\u0239\5\u04c7\0\105\5"+
    "\13\0\1\5\56\6\20\0\4\6\15\5\u4060\0\2\5\u2163\0\5\6"+
    "\3\0\26\6\2\0\7\6\36\0\4\6\224\0\3\6\u01bb\0\125\5"+
    "\1\0\107\5\1\0\2\5\2\0\1\5\2\0\2\5\2\0\4\5"+
    "\1\0\14\5\1\0\1\5\1\0\7\5\1\0\101\5\1\0\4\5"+
    "\2\0\10\5\1\0\7\5\1\0\34\5\1\0\4\5\1\0\5\5"+
    "\1\0\1\5\3\0\7\5\1\0\u0154\5\2\0\31\5\1\0\31\5"+
    "\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0\37\5"+
    "\1\0\31\5\1\0\37\5\1\0\31\5\1\0\10\5\2\0\62\6"+
    "\u1600\0\4\5\1\0\33\5\1\0\2\5\1\0\1\5\2\0\1\5"+
    "\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6\0\1\5"+
    "\4\0\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5"+
    "\1\0\1\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5"+
    "\1\0\4\5\1\0\4\5\1\0\1\5\1\0\12\5\1\0\21\5"+
    "\5\0\3\5\1\0\5\5\1\0\21\5\u1144\0\ua6d7\5\51\0\u1035\5"+
    "\13\0\336\5\u3fe2\0\u021e\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\6\36\0\140\6\200\0\360\6\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\20\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\1"+
    "\2\36\1\37\1\2\1\0\1\40\1\41\1\6\1\0"+
    "\1\6\1\0\3\6\1\0\1\42\1\43\1\44\23\3"+
    "\1\45\2\3\1\46\16\3\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\0\4\6\2\42\21\3\1\76"+
    "\3\3\1\77\4\3\1\100\11\3\1\101\7\3\1\102"+
    "\1\103\1\104\3\6\1\3\1\105\2\3\1\106\1\107"+
    "\7\3\1\110\2\3\1\111\1\112\2\3\1\113\21\3"+
    "\1\114\1\3\1\115\1\3\3\6\1\116\1\117\5\3"+
    "\1\120\1\121\3\3\1\122\14\3\1\123\1\124\1\125"+
    "\1\126\1\127\3\3\3\6\2\3\1\130\1\3\1\131"+
    "\3\3\1\132\1\3\1\133\3\3\1\134\3\3\1\135"+
    "\1\136\3\3\1\137\3\6\4\3\1\140\1\3\1\141"+
    "\3\3\1\142\1\143\1\3\1\144\1\145\1\3\3\6"+
    "\1\146\1\147\1\150\6\3\1\151\3\6\1\3\1\152"+
    "\1\3\1\153\1\3\1\154\3\6\1\3\1\155\1\156"+
    "\1\0\2\6\1\3\1\0\2\6\1\157\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\216\0\u011c\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u06ef\0\u0736\0\216\0\216\0\216\0\216"+
    "\0\216\0\216\0\216\0\216\0\u077d\0\u07c4\0\u080b\0\u0852"+
    "\0\216\0\216\0\216\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\216\0\216\0\u0ad1\0\u0b18\0\216"+
    "\0\216\0\u0b5f\0\u0ba6\0\216\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2"+
    "\0\u0d09\0\u0d50\0\216\0\216\0\u0d97\0\u0dde\0\u0e25\0\u0e6c"+
    "\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4"+
    "\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc"+
    "\0\u1323\0\u136a\0\u011c\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd"+
    "\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705"+
    "\0\u174c\0\216\0\216\0\u1793\0\216\0\u17da\0\216\0\216"+
    "\0\216\0\216\0\216\0\216\0\216\0\216\0\216\0\216"+
    "\0\216\0\216\0\216\0\216\0\216\0\216\0\216\0\216"+
    "\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\216\0\u19cb"+
    "\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03"+
    "\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b"+
    "\0\u011c\0\u1e82\0\u1ec9\0\u1f10\0\u011c\0\u1f57\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d"+
    "\0\u2264\0\u22ab\0\u22f2\0\u011c\0\u2339\0\u2380\0\u23c7\0\u240e"+
    "\0\u2455\0\u249c\0\u24e3\0\216\0\216\0\216\0\u252a\0\u2571"+
    "\0\u25b8\0\u25ff\0\u011c\0\u2646\0\u268d\0\u011c\0\u011c\0\u26d4"+
    "\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u011c\0\u28c5"+
    "\0\u290c\0\u011c\0\u011c\0\u2953\0\u299a\0\u011c\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u011c"+
    "\0\u2e98\0\u011c\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u011c\0\u011c"+
    "\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117\0\u011c\0\u011c\0\u315e"+
    "\0\u31a5\0\u31ec\0\u011c\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f"+
    "\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u011c"+
    "\0\u011c\0\u3587\0\u011c\0\u011c\0\u35ce\0\u3615\0\u365c\0\u36a3"+
    "\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u011c\0\u3806\0\u011c\0\u384d"+
    "\0\u3894\0\u38db\0\u011c\0\u3922\0\u011c\0\u3969\0\u39b0\0\u39f7"+
    "\0\u011c\0\u3a3e\0\u3a85\0\u3acc\0\u011c\0\u011c\0\u3b13\0\u3b5a"+
    "\0\u3ba1\0\u011c\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b"+
    "\0\u3d92\0\u011c\0\u3dd9\0\u011c\0\u3e20\0\u3e67\0\u3eae\0\u011c"+
    "\0\u011c\0\u3ef5\0\u011c\0\u011c\0\u3f3c\0\u3f83\0\u3fca\0\u4011"+
    "\0\u011c\0\u011c\0\u011c\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174"+
    "\0\u41bb\0\u011c\0\u4202\0\u4249\0\u4290\0\u42d7\0\u011c\0\u431e"+
    "\0\u011c\0\u4365\0\u011c\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u011c"+
    "\0\u011c\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b\0\u4672"+
    "\0\u011c\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863"+
    "\0\u48aa\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u4a54\0\u4a54"+
    "\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\2\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\3\6\3\12\1\13\1\6\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\6\1\22\1\23\1\24\1\25"+
    "\1\6\1\26\1\27\1\30\1\31\1\32\6\6\1\33"+
    "\1\6\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\6\3\3"+
    "\1\5\1\3\1\61\1\62\1\63\1\64\76\61\1\65"+
    "\4\61\112\0\1\5\110\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\31\6\24\0\1\6\4\0\1\6\7\0"+
    "\1\66\1\67\54\0\1\70\106\0\1\71\32\0\1\72"+
    "\1\73\1\74\1\75\1\0\1\76\1\77\1\100\1\101"+
    "\1\102\2\0\1\74\2\0\1\102\1\75\66\0\2\12"+
    "\1\74\2\0\3\12\1\101\1\102\2\0\1\74\2\0"+
    "\1\102\67\0\2\101\3\0\3\101\111\0\1\103\41\0"+
    "\1\104\26\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\105\1\106\16\6\1\107\1\6\1\110\5\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\21\6\1\111\7\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\17\6\1\112\11\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\6\6"+
    "\1\113\7\6\1\114\3\6\1\115\1\116\1\117\4\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\120\3\6\1\121\23\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\14\6\1\122\6\6\1\123\5\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\2\6\1\124\1\6\1\125\15\6"+
    "\1\126\6\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\4\6\1\127\14\6"+
    "\1\130\7\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\7\6\1\131\2\6"+
    "\1\132\2\6\1\133\13\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\2\6"+
    "\1\134\11\6\1\135\5\6\1\136\6\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\4\6\1\137\24\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\140\1\141\6\6\1\142\7\6\1\143\7\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\23\6\1\144\5\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\14\6\1\145\4\6\1\146\2\6\1\147\4\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\21\6\1\150\7\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\6\6\1\151\22\6\24\0\1\6\4\0\1\6\65\0"+
    "\1\152\106\0\1\153\1\154\105\0\1\155\1\0\1\156"+
    "\104\0\1\157\106\0\1\160\6\0\1\161\77\0\1\162"+
    "\7\0\1\163\76\0\1\164\10\0\1\165\75\0\1\166"+
    "\106\0\1\167\21\0\1\61\3\0\76\61\1\0\4\61"+
    "\1\170\1\171\2\0\26\170\1\172\1\173\4\170\1\174"+
    "\1\175\1\170\1\176\36\170\1\177\1\200\6\0\1\64"+
    "\103\0\2\66\1\4\1\5\103\66\10\67\1\201\76\67"+
    "\11\0\1\72\1\73\1\74\2\0\1\76\1\77\1\100"+
    "\1\101\1\102\2\0\1\74\2\0\1\102\67\0\2\73"+
    "\3\0\3\73\1\101\1\102\5\0\1\102\67\0\1\202"+
    "\1\203\2\0\4\203\1\0\1\203\1\0\1\203\1\0"+
    "\1\203\1\0\1\203\3\0\1\203\4\0\1\203\1\0"+
    "\1\203\35\0\1\203\16\0\1\204\1\73\1\74\2\0"+
    "\3\204\1\101\1\102\2\0\1\74\2\0\1\102\67\0"+
    "\1\205\1\73\1\74\2\0\3\205\1\101\1\102\2\0"+
    "\1\74\2\0\1\102\67\0\1\77\1\73\1\74\2\0"+
    "\3\77\1\101\1\102\2\0\1\74\2\0\1\102\67\0"+
    "\2\101\3\0\3\101\1\0\1\102\5\0\1\102\67\0"+
    "\2\206\3\0\3\206\2\0\1\206\10\0\1\207\4\0"+
    "\1\207\34\0\1\206\2\0\1\207\12\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\2\6\1\210\26\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\3\6\1\211\2\6\1\212\22\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\7\6\1\213\21\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\2\6\1\214\26\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\7\6\1\215"+
    "\21\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\3\6\1\216\25\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\2\6\1\217\11\6\1\220\14\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\11\6\1\221\17\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\13\6\1\222\15\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\21\6\1\223"+
    "\7\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\7\6\1\224\21\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\3\6\1\225\25\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\6\6\1\226\22\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\2\6\1\227"+
    "\17\6\1\230\1\6\1\231\4\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\11\6\1\232\2\6\1\233\14\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\6\6\1\234\22\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\16\6\1\235"+
    "\12\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\6\1\236\27\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\15\6\1\237\13\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\22\6\1\240\6\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\3\6\1\241"+
    "\2\6\1\242\22\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\13\6\1\243"+
    "\15\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\244\30\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\11\6\1\245\7\6\1\246\7\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\17\6\1\247\11\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\6\6"+
    "\1\250\22\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\21\6\1\251\7\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\252\27\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\7\6\1\253\21\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\14\6"+
    "\1\254\14\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\11\6\1\255\17\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\4\6\1\256\24\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\21\6\1\257\7\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\6\6"+
    "\1\260\22\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\261\7\6"+
    "\1\262\17\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\14\6\1\263\14\6"+
    "\24\0\1\6\4\0\1\6\65\0\1\264\1\265\105\0"+
    "\1\266\21\0\7\67\1\5\1\201\76\67\11\0\1\202"+
    "\1\203\1\74\1\0\4\203\1\0\1\203\1\0\1\203"+
    "\1\74\1\203\1\0\1\203\3\0\1\203\4\0\1\203"+
    "\1\0\1\203\35\0\1\203\16\0\2\267\1\74\1\0"+
    "\4\267\1\0\1\267\1\0\1\267\1\74\1\267\1\0"+
    "\1\267\3\0\1\267\4\0\1\267\1\0\1\267\35\0"+
    "\1\267\16\0\1\270\1\73\1\74\2\0\3\270\1\101"+
    "\1\102\2\0\1\74\2\0\1\102\67\0\1\271\1\73"+
    "\1\74\2\0\3\271\1\101\1\102\2\0\1\74\2\0"+
    "\1\102\67\0\2\206\3\0\3\206\13\0\1\207\4\0"+
    "\1\207\37\0\1\207\12\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\3\6\1\272\25\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\4\6\1\273\24\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\1\274\30\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\6\6\1\275\22\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\14\6\1\276\14\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\25\6"+
    "\1\277\3\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\6\6\1\300\22\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\6\6\1\301\22\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\11\6\1\302\17\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\6\6"+
    "\1\303\22\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\4\6\1\304\24\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\14\6\1\305\14\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\306\30\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\4\6\1\307"+
    "\24\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\4\6\1\310\24\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\7\6\1\311\21\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\4\6\1\312\24\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\3\6\1\313"+
    "\25\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\21\6\1\314\7\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\11\6\1\315\17\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\316\27\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\2\6\1\317"+
    "\26\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\17\6\1\320\11\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\6\6\1\321\22\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\4\6\1\322\24\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\1\6\1\323"+
    "\17\6\1\324\7\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\20\6\1\325"+
    "\10\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\26\6\1\326\2\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\6\6\1\327\22\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\330\27\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\22\6\1\331"+
    "\6\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\2\6\1\332\26\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\3\6\1\333\25\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\2\6\1\334\26\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\1\6\1\335"+
    "\27\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\2\6\1\336\26\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\337\27\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\4\6\1\340\24\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\2\6\1\341"+
    "\26\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\10\6\1\342\20\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\11\6\1\343\17\6\24\0\1\6\4\0"+
    "\1\6\11\0\2\344\1\74\1\0\4\344\1\0\1\344"+
    "\1\0\1\344\1\74\1\344\1\0\1\344\3\0\1\344"+
    "\4\0\1\344\1\0\1\344\35\0\1\344\16\0\1\345"+
    "\1\73\1\74\2\0\3\345\1\101\1\102\2\0\1\74"+
    "\2\0\1\102\67\0\1\346\1\73\1\74\2\0\3\346"+
    "\1\101\1\102\2\0\1\74\2\0\1\102\63\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\3\6\1\347\25\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\23\6\1\350\5\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\11\6\1\351\17\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\14\6"+
    "\1\352\14\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\11\6\1\353\17\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\354\30\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\355\30\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\14\6\1\356\14\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\6\6\1\357\22\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\23\6\1\360\5\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\7\6"+
    "\1\361\21\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\3\6\1\362\25\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\16\6\1\363\12\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\26\6\1\364\2\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\22\6"+
    "\1\365\6\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\366\27\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\2\6\1\367\26\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\14\6\1\370\14\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\4\6"+
    "\1\371\24\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\14\6\1\372\14\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\2\6\1\373\26\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\2\6\1\374\26\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\4\6"+
    "\1\375\24\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\11\6\1\376\17\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\14\6\1\377\14\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\6\6\1\u0100\22\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\4\6"+
    "\1\u0101\24\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\u0102\27\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\4\6\1\u0103\24\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\20\6\1\u0104\10\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\4\6"+
    "\1\u0105\24\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\6\6\1\u0106\22\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\7\6\1\u0107\21\6\24\0\1\6"+
    "\4\0\1\6\11\0\2\u0108\1\74\1\0\4\u0108\1\0"+
    "\1\u0108\1\0\1\u0108\1\74\1\u0108\1\0\1\u0108\3\0"+
    "\1\u0108\4\0\1\u0108\1\0\1\u0108\35\0\1\u0108\16\0"+
    "\1\u0109\1\73\1\74\2\0\3\u0109\1\101\1\102\2\0"+
    "\1\74\2\0\1\102\67\0\1\u010a\1\73\1\74\2\0"+
    "\3\u010a\1\101\1\102\2\0\1\74\2\0\1\102\63\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\7\6\1\u010b"+
    "\21\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\2\6\1\u010c\26\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\u010d\30\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\6\6"+
    "\1\u010e\22\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\23\6\1\u010f\5\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\14\6\1\u0110\14\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\10\6\1\u0111\20\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\11\6"+
    "\1\u0112\17\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\4\6\1\u0113\24\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\u0114\27\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\4\6\1\u0115\24\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\7\6"+
    "\1\u0116\21\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\15\6\1\u0117\13\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\12\6\1\u0118\16\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\6\6\1\u0119\22\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\25\6"+
    "\1\u011a\3\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\6\6\1\u011b\22\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\u011c\30\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\u011d\30\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\7\6\1\u011e\21\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\u011f\27\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\2\6\1\u0120\26\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\11\6"+
    "\1\u0121\17\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\25\6\1\u0122\3\6"+
    "\24\0\1\6\4\0\1\6\11\0\2\u0123\1\74\1\0"+
    "\4\u0123\1\0\1\u0123\1\0\1\u0123\1\74\1\u0123\1\0"+
    "\1\u0123\3\0\1\u0123\4\0\1\u0123\1\0\1\u0123\35\0"+
    "\1\u0123\16\0\1\u0124\1\73\1\74\2\0\3\u0124\1\101"+
    "\1\102\2\0\1\74\2\0\1\102\67\0\1\u0125\1\73"+
    "\1\74\2\0\3\u0125\1\101\1\102\2\0\1\74\2\0"+
    "\1\102\63\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\22\6\1\u0126\6\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\1\u0127\30\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\15\6\1\u0128\13\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\21\6\1\u0129\7\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\3\6"+
    "\1\u012a\25\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\4\6\1\u012b\24\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\6\6\1\u012c\22\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\u012d\30\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\2\6\1\u012e"+
    "\26\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\4\6\1\u012f\24\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\4\6\1\u0130\24\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\4\6\1\u0131\24\6\24\0\1\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\6\6\1\u0132"+
    "\22\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\24\6\1\u0133\4\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\7\6\1\u0134\21\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\u0135\27\6\24\0\1\6\4\0\1\6\11\0"+
    "\2\u0136\1\74\1\0\4\u0136\1\0\1\u0136\1\0\1\u0136"+
    "\1\74\1\u0136\1\0\1\u0136\3\0\1\u0136\4\0\1\u0136"+
    "\1\0\1\u0136\35\0\1\u0136\16\0\1\u0137\1\73\1\74"+
    "\2\0\3\u0137\1\101\1\102\2\0\1\74\2\0\1\102"+
    "\67\0\1\u0138\1\73\1\74\2\0\3\u0138\1\101\1\102"+
    "\2\0\1\74\2\0\1\102\63\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\4\6\1\u0139\24\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\6\6\1\u013a\22\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\13\6"+
    "\1\u013b\15\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\7\6\1\u013c\21\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\7\6\1\u013d\21\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\4\6\1\u013e\24\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\1\u013f"+
    "\30\6\24\0\1\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\7\6\1\u0140\21\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\4\6\1\u0141\24\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\4\6\1\u0142\24\6\24\0\1\6\4\0\1\6\11\0"+
    "\2\u0143\1\74\1\0\4\u0143\1\0\1\u0143\1\0\1\u0143"+
    "\1\74\1\u0143\1\0\1\u0143\3\0\1\u0143\4\0\1\u0143"+
    "\1\0\1\u0143\35\0\1\u0143\16\0\1\u0144\1\73\1\74"+
    "\2\0\3\u0144\1\101\1\102\2\0\1\74\2\0\1\102"+
    "\67\0\1\u0145\1\73\1\74\2\0\3\u0145\1\101\1\102"+
    "\2\0\1\74\2\0\1\102\63\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\11\6\1\u0146\17\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\6\6\1\u0147\22\6\24\0\1\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\21\6"+
    "\1\u0148\7\6\24\0\1\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\4\6\1\u0149\24\6"+
    "\24\0\1\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\6\6\1\u014a\22\6\24\0\1\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\10\6\1\u014b\20\6\24\0\1\6\4\0\1\6"+
    "\11\0\2\u014c\1\74\1\0\4\u014c\1\0\1\u014c\1\0"+
    "\1\u014c\1\74\1\u014c\1\0\1\u014c\3\0\1\u014c\4\0"+
    "\1\u014c\1\0\1\u014c\35\0\1\u014c\16\0\1\u014d\1\73"+
    "\1\74\2\0\3\u014d\1\101\1\102\2\0\1\74\2\0"+
    "\1\102\67\0\1\u014e\1\73\1\74\2\0\3\u014e\1\101"+
    "\1\102\2\0\1\74\2\0\1\102\63\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\27\6\1\u014f\1\6\24\0"+
    "\1\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\15\6\1\u0150\13\6\24\0\1\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\3\6\1\u0151\25\6\24\0\1\6\4\0\1\6\11\0"+
    "\2\u0152\1\74\1\0\4\u0152\1\0\1\u0152\1\0\1\u0152"+
    "\1\74\1\u0152\1\0\1\u0152\3\0\1\u0152\4\0\1\u0152"+
    "\1\0\1\u0152\35\0\1\u0152\16\0\1\u0153\1\73\1\74"+
    "\2\0\3\u0153\1\101\1\102\2\0\1\74\2\0\1\102"+
    "\67\0\1\u0154\1\73\1\74\2\0\3\u0154\1\101\1\102"+
    "\2\0\1\74\2\0\1\102\63\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\4\6\1\u0155\24\6\24\0\1\6"+
    "\4\0\1\6\11\0\2\u0156\1\74\1\0\4\u0156\1\0"+
    "\1\u0156\1\0\1\u0156\1\74\1\u0156\1\0\1\u0156\3\0"+
    "\1\u0156\4\0\1\u0156\1\0\1\u0156\35\0\1\u0156\16\0"+
    "\1\u0157\1\73\1\74\2\0\3\u0157\1\101\1\102\2\0"+
    "\1\74\2\0\1\102\67\0\1\u0158\1\73\1\74\2\0"+
    "\3\u0158\1\101\1\102\2\0\1\74\2\0\1\102\63\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\10\6\1\u0159"+
    "\20\6\24\0\1\6\4\0\1\6\11\0\2\u015a\1\74"+
    "\1\0\4\u015a\1\0\1\u015a\1\0\1\u015a\1\74\1\u015a"+
    "\1\0\1\u015a\3\0\1\u015a\4\0\1\u015a\1\0\1\u015a"+
    "\35\0\1\u015a\16\0\1\u015b\1\73\1\74\2\0\3\u015b"+
    "\1\101\1\102\2\0\1\74\2\0\1\102\67\0\1\u015c"+
    "\1\73\1\74\2\0\3\u015c\1\101\1\102\2\0\1\74"+
    "\2\0\1\102\67\0\2\u015d\1\74\1\0\4\u015d\1\0"+
    "\1\u015d\1\0\1\u015d\1\74\1\u015d\1\0\1\u015d\3\0"+
    "\1\u015d\4\0\1\u015d\1\0\1\u015d\35\0\1\u015d\16\0"+
    "\1\u015e\1\73\1\74\2\0\3\u015e\1\101\1\102\2\0"+
    "\1\74\2\0\1\102\67\0\1\u015f\1\73\1\74\2\0"+
    "\3\u015f\1\101\1\102\2\0\1\74\2\0\1\102\67\0"+
    "\2\u0160\1\74\1\0\4\u0160\1\0\1\u0160\1\0\1\u0160"+
    "\1\74\1\u0160\1\0\1\u0160\3\0\1\u0160\4\0\1\u0160"+
    "\1\0\1\u0160\35\0\1\u0160\16\0\1\u0161\1\73\1\74"+
    "\2\0\3\u0161\1\101\1\102\2\0\1\74\2\0\1\102"+
    "\67\0\1\u0162\1\73\1\74\2\0\3\u0162\1\101\1\102"+
    "\2\0\1\74\2\0\1\102\67\0\2\u0163\1\74\1\0"+
    "\4\u0163\1\0\1\u0163\1\0\1\u0163\1\74\1\u0163\1\0"+
    "\1\u0163\3\0\1\u0163\4\0\1\u0163\1\0\1\u0163\35\0"+
    "\1\u0163\16\0\1\u0164\1\73\1\74\2\0\3\u0164\1\101"+
    "\1\102\2\0\1\74\2\0\1\102\67\0\1\u0165\1\73"+
    "\1\74\2\0\3\u0165\1\101\1\102\2\0\1\74\2\0"+
    "\1\102\67\0\2\u0166\1\74\1\0\4\u0166\1\0\1\u0166"+
    "\1\0\1\u0166\1\74\1\u0166\1\0\1\u0166\3\0\1\u0166"+
    "\4\0\1\u0166\1\0\1\u0166\35\0\1\u0166\16\0\1\u0167"+
    "\1\73\1\74\2\0\3\u0167\1\101\1\102\2\0\1\74"+
    "\2\0\1\102\67\0\1\u0168\1\73\1\74\2\0\3\u0168"+
    "\1\101\1\102\2\0\1\74\2\0\1\102\67\0\2\u0169"+
    "\1\74\1\0\4\u0169\1\0\1\u0169\1\0\1\u0169\1\74"+
    "\1\u0169\1\0\1\u0169\3\0\1\u0169\4\0\1\u0169\1\0"+
    "\1\u0169\35\0\1\u0169\16\0\1\u016a\1\73\1\74\2\0"+
    "\3\u016a\1\101\1\102\2\0\1\74\2\0\1\102\71\0"+
    "\1\74\11\0\1\74\72\0\1\u016b\1\73\1\74\2\0"+
    "\3\u016b\1\101\1\102\2\0\1\74\2\0\1\102\67\0"+
    "\1\u016c\1\73\1\74\2\0\3\u016c\1\101\1\102\2\0"+
    "\1\74\2\0\1\102\67\0\1\u016d\1\73\1\74\2\0"+
    "\3\u016d\1\101\1\102\2\0\1\74\2\0\1\102\67\0"+
    "\1\u016e\1\73\1\74\2\0\3\u016e\1\101\1\102\2\0"+
    "\1\74\2\0\1\102\67\0\2\73\1\74\2\0\3\73"+
    "\1\101\1\102\2\0\1\74\2\0\1\102\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19525];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\27\1\10\11\4\1\3\11"+
    "\10\1\2\11\1\1\1\0\2\11\1\1\1\0\1\11"+
    "\1\0\3\1\1\0\1\1\2\11\45\1\2\11\1\1"+
    "\1\11\1\1\22\11\1\0\5\1\1\11\54\1\3\11"+
    "\233\1\1\0\3\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\1\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();  

  private Symbol Symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol Symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexical(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2888) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                             "\" at line "+yyline+", column "+yycolumn);
            }
          case 112: break;
          case 2: 
            { /*Ignore*/
            }
          case 113: break;
          case 3: 
            { return Symbol(Sym.ID, new String(yytext()));
            }
          case 114: break;
          case 4: 
            { return Symbol(Sym.DIV, new String(yytext()));
            }
          case 115: break;
          case 5: 
            { return Symbol(Sym.MULT, new String(yytext()));
            }
          case 116: break;
          case 6: 
            { return Symbol(Sym.INTEGER_LITERAL, new String(yytext()));
            }
          case 117: break;
          case 7: 
            { return Symbol(Sym.DOT, new String(yytext()));
            }
          case 118: break;
          case 8: 
            { return Symbol(Sym.MINUS, new String(yytext()));
            }
          case 119: break;
          case 9: 
            { return Symbol(Sym.LPAREN, new String(yytext()));
            }
          case 120: break;
          case 10: 
            { return Symbol(Sym.RPAREN, new String(yytext()));
            }
          case 121: break;
          case 11: 
            { return Symbol(Sym.LBRACE, new String(yytext()));
            }
          case 122: break;
          case 12: 
            { return Symbol(Sym.RBRACE, new String(yytext()));
            }
          case 123: break;
          case 13: 
            { return Symbol(Sym.LBRACK, new String(yytext()));
            }
          case 124: break;
          case 14: 
            { return Symbol(Sym.RBRACK, new String(yytext()));
            }
          case 125: break;
          case 15: 
            { return Symbol(Sym.SEMICOLON, new String(yytext()));
            }
          case 126: break;
          case 16: 
            { return Symbol(Sym.COMMA, new String(yytext()));
            }
          case 127: break;
          case 17: 
            { return Symbol(Sym.EQUAL, new String(yytext()));
            }
          case 128: break;
          case 18: 
            { return Symbol(Sym.GREATER, new String(yytext()));
            }
          case 129: break;
          case 19: 
            { return Symbol(Sym.LESS, new String(yytext()));
            }
          case 130: break;
          case 20: 
            { return Symbol(Sym.NOT, new String(yytext()));
            }
          case 131: break;
          case 21: 
            { return Symbol(Sym.BITNOT, new String(yytext()));
            }
          case 132: break;
          case 22: 
            { return Symbol(Sym.QUESTION, new String(yytext()));
            }
          case 133: break;
          case 23: 
            { return Symbol(Sym.COLON, new String(yytext()));
            }
          case 134: break;
          case 24: 
            { return Symbol(Sym.AND, new String(yytext()));
            }
          case 135: break;
          case 25: 
            { return Symbol(Sym.OR, new String(yytext()));
            }
          case 136: break;
          case 26: 
            { return Symbol(Sym.PLUS, new String(yytext()));
            }
          case 137: break;
          case 27: 
            { return Symbol(Sym.XOR, new String(yytext()));
            }
          case 138: break;
          case 28: 
            { return Symbol(Sym.MOD, new String(yytext()));
            }
          case 139: break;
          case 29: 
            { string.append( yytext() );
            }
          case 140: break;
          case 30: 
            { throw new RuntimeException(
                                       "Unterminated string at end of line");
            }
          case 141: break;
          case 31: 
            { yybegin(YYINITIAL);
                                   return Symbol(Sym.STRING_LITERAL, new String(yytext()));
            }
          case 142: break;
          case 32: 
            { return Symbol(Sym.DIVEQ, new String(yytext()));
            }
          case 143: break;
          case 33: 
            { return Symbol(Sym.MULTEQ, new String(yytext()));
            }
          case 144: break;
          case 34: 
            { return Symbol(Sym.FLOAT_LITERAL, new String(yytext()));
            }
          case 145: break;
          case 35: 
            { return Symbol(Sym.MINUSMINUS, new String(yytext()));
            }
          case 146: break;
          case 36: 
            { return Symbol(Sym.MINUSEQ, new String(yytext()));
            }
          case 147: break;
          case 37: 
            { return Symbol(Sym.DO, new String(yytext()));
            }
          case 148: break;
          case 38: 
            { return Symbol(Sym.IF, new String(yytext()));
            }
          case 149: break;
          case 39: 
            { return Symbol(Sym.EQEQ, new String(yytext()));
            }
          case 150: break;
          case 40: 
            { return Symbol(Sym.GTEQ, new String(yytext()));
            }
          case 151: break;
          case 41: 
            { return Symbol(Sym.RSHIFT, new String(yytext()));
            }
          case 152: break;
          case 42: 
            { return Symbol(Sym.LTEQ, new String(yytext()));
            }
          case 153: break;
          case 43: 
            { return Symbol(Sym.LSHIFT, new String(yytext()));
            }
          case 154: break;
          case 44: 
            { return Symbol(Sym.NOTEQ, new String(yytext()));
            }
          case 155: break;
          case 45: 
            { return Symbol(Sym.ANDEQ, new String(yytext()));
            }
          case 156: break;
          case 46: 
            { return Symbol(Sym.ANDAND, new String(yytext()));
            }
          case 157: break;
          case 47: 
            { return Symbol(Sym.OREQ, new String(yytext()));
            }
          case 158: break;
          case 48: 
            { return Symbol(Sym.OROR, new String(yytext()));
            }
          case 159: break;
          case 49: 
            { return Symbol(Sym.PLUSEQ, new String(yytext()));
            }
          case 160: break;
          case 50: 
            { return Symbol(Sym.PLUSPLUS, new String(yytext()));
            }
          case 161: break;
          case 51: 
            { return Symbol(Sym.XOREQ, new String(yytext()));
            }
          case 162: break;
          case 52: 
            { return Symbol(Sym.MODEQ, new String(yytext()));
            }
          case 163: break;
          case 53: 
            { throw new RuntimeException(
                                  "Illegal escape sequence \""+yytext()+"\"");
            }
          case 164: break;
          case 54: 
            { string.append( '\\' );
            }
          case 165: break;
          case 55: 
            { string.append( '\t' );
            }
          case 166: break;
          case 56: 
            { string.append( '\n' );
            }
          case 167: break;
          case 57: 
            { string.append( '\r' );
            }
          case 168: break;
          case 58: 
            { string.append( '\f' );
            }
          case 169: break;
          case 59: 
            { string.append( '\b' );
            }
          case 170: break;
          case 60: 
            { string.append( '\"' );
            }
          case 171: break;
          case 61: 
            { string.append( '\'' );
            }
          case 172: break;
          case 62: 
            { return Symbol(Sym.TRY, new String(yytext()));
            }
          case 173: break;
          case 63: 
            { return Symbol(Sym.NEW, new String(yytext()));
            }
          case 174: break;
          case 64: 
            { return Symbol(Sym.INT, new String(yytext()));
            }
          case 175: break;
          case 65: 
            { return Symbol(Sym.FOR, new String(yytext()));
            }
          case 176: break;
          case 66: 
            { return Symbol(Sym.RSHIFTEQ, new String(yytext()));
            }
          case 177: break;
          case 67: 
            { return Symbol(Sym.URSHIFT, new String(yytext()));
            }
          case 178: break;
          case 68: 
            { return Symbol(Sym.LSHIFTEQ, new String(yytext()));
            }
          case 179: break;
          case 69: 
            { return Symbol(Sym.CASE, new String(yytext()));
            }
          case 180: break;
          case 70: 
            { return Symbol(Sym.CHAR, new String(yytext()));
            }
          case 181: break;
          case 71: 
            { return Symbol(Sym.LONG, new String(yytext()));
            }
          case 182: break;
          case 72: 
            { return Symbol(Sym.ELSE, new String(yytext()));
            }
          case 183: break;
          case 73: 
            { return Symbol(Sym.TRUE, new String(yytext()));
            }
          case 184: break;
          case 74: 
            { return Symbol(Sym.THIS, new String(yytext()));
            }
          case 185: break;
          case 75: 
            { return Symbol(Sym.NULL, new String(yytext()));
            }
          case 186: break;
          case 76: 
            { return Symbol(Sym.BYTE, new String(yytext()));
            }
          case 187: break;
          case 77: 
            { return Symbol(Sym.VOID, new String(yytext()));
            }
          case 188: break;
          case 78: 
            { return Symbol(Sym.CLASS, new String(yytext()));
            }
          case 189: break;
          case 79: 
            { return Symbol(Sym.CATCH, new String(yytext()));
            }
          case 190: break;
          case 80: 
            { return Symbol(Sym.SUPER, new String(yytext()));
            }
          case 191: break;
          case 81: 
            { return Symbol(Sym.SHORT, new String(yytext()));
            }
          case 192: break;
          case 82: 
            { return Symbol(Sym.THROW, new String(yytext()));
            }
          case 193: break;
          case 83: 
            { return Symbol(Sym.FLOAT, new String(yytext()));
            }
          case 194: break;
          case 84: 
            { return Symbol(Sym.FALSE, new String(yytext()));
            }
          case 195: break;
          case 85: 
            { return Symbol(Sym.FINAL, new String(yytext()));
            }
          case 196: break;
          case 86: 
            { return Symbol(Sym.WHILE, new String(yytext()));
            }
          case 197: break;
          case 87: 
            { return Symbol(Sym.BREAK, new String(yytext()));
            }
          case 198: break;
          case 88: 
            { return Symbol(Sym.STATIC, new String(yytext()));
            }
          case 199: break;
          case 89: 
            { return Symbol(Sym.SWITCH, new String(yytext()));
            }
          case 200: break;
          case 90: 
            { return Symbol(Sym.NATIVE, new String(yytext()));
            }
          case 201: break;
          case 91: 
            { return Symbol(Sym.DOUBLE, new String(yytext()));
            }
          case 202: break;
          case 92: 
            { return Symbol(Sym.IMPORT, new String(yytext()));
            }
          case 203: break;
          case 93: 
            { return Symbol(Sym.PUBLIC, new String(yytext()));
            }
          case 204: break;
          case 94: 
            { return Symbol(Sym.RETURN, new String(yytext()));
            }
          case 205: break;
          case 95: 
            { return Symbol(Sym.STRING, new String(yytext()));
            }
          case 206: break;
          case 96: 
            { return Symbol(Sym.EXTENDS, new String(yytext()));
            }
          case 207: break;
          case 97: 
            { return Symbol(Sym.DEFAULT, new String(yytext()));
            }
          case 208: break;
          case 98: 
            { return Symbol(Sym.PACKAGE, new String(yytext()));
            }
          case 209: break;
          case 99: 
            { return Symbol(Sym.PRIVATE, new String(yytext()));
            }
          case 210: break;
          case 100: 
            { return Symbol(Sym.FINALLY, new String(yytext()));
            }
          case 211: break;
          case 101: 
            { return Symbol(Sym.BOOLEAN, new String(yytext()));
            }
          case 212: break;
          case 102: 
            { return Symbol(Sym.CONTINUE, new String(yytext()));
            }
          case 213: break;
          case 103: 
            { return Symbol(Sym.ABSTRACT, new String(yytext()));
            }
          case 214: break;
          case 104: 
            { return Symbol(Sym.STRICTFP, new String(yytext()));
            }
          case 215: break;
          case 105: 
            { return Symbol(Sym.VOLATILE, new String(yytext()));
            }
          case 216: break;
          case 106: 
            { return Symbol(Sym.TRANSIENT, new String(yytext()));
            }
          case 217: break;
          case 107: 
            { return Symbol(Sym.INTERFACE, new String(yytext()));
            }
          case 218: break;
          case 108: 
            { return Symbol(Sym.PROTECTED, new String(yytext()));
            }
          case 219: break;
          case 109: 
            { return Symbol(Sym.INSTANCEOF, new String(yytext()));
            }
          case 220: break;
          case 110: 
            { return Symbol(Sym.IMPLEMENTS, new String(yytext()));
            }
          case 221: break;
          case 111: 
            { return Symbol(Sym.SYNCHRONIZED, new String(yytext()));
            }
          case 222: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
