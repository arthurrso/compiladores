package br.com.arthurrso.lexicalanalyzer;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import br.com.arthurrso.semantical.Variable;


parser code {:

    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

:};

// terminais
terminal INTERFACE, NEW, BREAK, CASE;
terminal CONTINUE, DEFAULT, IF, ELSE, FOR, RETURN, SWITCH;
terminal IMPORT;
terminal PACKAGE, BYTE;
terminal BOOLEAN, INT;
terminal STRING, TRUE, FALSE, INTEGER;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON;
terminal COMMA, DOT, EQUAL, GREATER, LESS, NOT;
terminal COLON, EQEQ, LTEQ, GTEQ, NOTEQ, ANDAND, OROR, PLUSPLUS;
terminal MINUSMINUS, PLUS, MINUS, MULT, DIV, AND, OR, XOR, MOD;
terminal LSHIFT, RSHIFT, URSHIFT, PLUSEQ, MINUSEQ, MULTEQ, DIVEQ;
terminal ANDEQ, OREQ, XOREQ, MODEQ, LSHIFTEQ, RSHIFTEQ;
terminal VARIABLE, ASSIGNMENT, FUNCTION, ANDNOT, FUNCTION_PARAMS, CALL_FUNCTION;
terminal GO, RECIEVER, SHORTDECLARATION, ANDNOTEQ, MAP, VAR, ELLIPSIS;
terminal RUNE, CHAN, TYPE, FUNC, GOTO, RANGE, ERROR, CONST, DEFER;
terminal SELECT, STRUCT, FALLTHROUGH; 
terminal STRING_LITERAL;

// nao terminais
non terminal compilation_unit, identifier, package_statement_e_aux;
non terminal package_statement;
non terminal type;
non terminal field_declaration_e_aux;
non terminal field_declaration_e, field_declaration;
non terminal arglist;
non terminal bracks_e_aux, argslist_e_aux;
non terminal expression, numeric_expression, testing_expression, logical_expression, bit_expression;
non terminal casting_expression, creating_expression, expression_end, expression_e_aux, return_expression;
non terminal parentheses_expression, literal, statement,  if_else_statement;
non terminal braced_statement, partial_statement_end, no_statement, if_nested_statement;
non terminal if_statement, for_statement;
non terminal switch_statement;
non terminal switch_cases_default, case_sentence, case_sentences, default_sentences, default_sentence;
non terminal for_statement_begin, for_statement_others, statements_within_braces, statement_within_braces;
non terminal statements_within_braces_e_aux, variable_declaration, variable_declarator;
non terminal variable_initializer, variable_initializers_e_aux, variable_initializers, variable_declarators;
non terminal statement_variable_declaration, variable_declarator_this_super;
non terminal parameter, parameter_e_aux, parameter_e, error1;


start with compilation_unit;

//#############package##############//
compilation_unit ::= package_statement_e_aux:p
                                {:if(p != null){
                                     System.out.println("PACKAGE RECONIZED: "+ p);
                                };:};

package_statement_e_aux ::= package_statement:p {:RESULT = p;:};

package_statement ::= PACKAGE:p SEMICOLON
                                     {: System.out.println("PACKAGE RECONIZED: "+ p );:};

//#############end package##############//


literal ::=STRING_LITERAL:sl 	{: RESULT = new Variable(sl.toString(), null, "string_literal", sl); :}
	| TRUE :t 		{: RESULT = new Variable(t.toString(), null, "bool_literal", t); :}
	| FALSE:f 		{: RESULT = new Variable(f.toString(), null, "bool_literal", f); :};

type ::= BOOLEAN:bl 	{: RESULT = bl; :}
	| BYTE:b  	{: RESULT = b; :}
	| STRING:s	{: RESULT = s; :};


//############# variables declarations ##############//
variable_declaration ::= type:t variable_declarators:v SEMICOLON
                                      {:RESULT = new Variable(v.toString(), null, t.toString(), v) ;
                                         System.out.println("Variable declareted: " + v);
                                       :}
                                      | variable_declarators:v SEMICOLON
                                      {: System.err.println("SEMANTIC ERROR: Variable not declareted, name: " + v);:}
			| variable_declarators SEMICOLON;

variable_declarators ::= variable_declarator:v  {:RESULT = v;:} | variable_declarators COMMA variable_declarator ;

variable_declarator ::= identifier:id bracks_e_aux variable_initializers_e_aux:var
                                      {:RESULT = id;
                                      if(var != null){
                                             System.out.println("Variable initialized: " + id);
                                      }else{
                                             System.out.println("WARNING: Variable not initialized " + id);
                                      }:};

variable_initializers_e_aux ::= variable_initializer:v{:RESULT = v;:};
variable_initializers ::= variable_initializers:v COMMA variable_initializer
                                         {:RESULT = v;:}
			 | variable_initializer:v
			   {:RESULT = v;:};
variable_initializer ::= EQUAL expression:e {:RESULT = e;:}
			| EQUAL LBRACE variable_initializers RBRACE | EQUAL LBRACE RBRACE;
//############# end variables declarations ##############//

//###################################################################################//
//###################################################################################//

field_declaration_e_aux ::= field_declaration_e:f {:RESULT = f;:};
field_declaration_e ::=	field_declaration:f {:RESULT = f;:} | field_declaration_e field_declaration;

field_declaration ::= variable_declaration | error1 ;


bracks_e_aux ::= bracks_e_aux LBRACK RBRACK;

expression_e_aux ::= expression:e {:RESULT = e;:};

expression ::= numeric_expression:n {:RESULT = n;:}|  expression LPAREN expression RPAREN;

numeric_expression ::= testing_expression:te {:RESULT = te;:}//{:System.out.println("Testing: "+te);:}//{:RESULT = te;:}
		| numeric_expression:e1 PLUS:p testing_expression:e2  {:System.out.println(RESULT + "  ");:}
//		{: RESULT = SemanticAnalyzer.checkAdditiveExp(e2.toString(), p, e1);:}

		| numeric_expression:e1 MINUS:m testing_expression:e2
//		{: RESULT = SemanticAnalyzer.checkAdditiveExp(e1.toString(), m, e2); :}

		| numeric_expression:e1 MULT:m testing_expression:e2
//		{: RESULT = SemanticAnalyzer.checkMultiplicativeExp(e1.toString(), m, e2); :}

		| numeric_expression:e1 DIV:d testing_expression:e2
//		{: RESULT = SemanticAnalyzer.checkMultiplicativeExp(e1.toString(), d, e2); :}

		| numeric_expression:e1 MOD:m testing_expression:e2
//		{: RESULT = SemanticAnalyzer.checkMultiplicativeExp(e1.toString(), m, e2); :}

		| numeric_expression DIVEQ testing_expression
		| numeric_expression PLUSEQ testing_expression
		| numeric_expression MINUSEQ testing_expression
		| numeric_expression MULTEQ testing_expression
		| numeric_expression MODEQ testing_expression;

testing_expression ::= logical_expression:le {:RESULT = le;:}
		| testing_expression:e1 GREATER:g logical_expression:e2
//		{: RESULT = SemanticAnalyzer.checkRelationalExp(e1.toString(), g, e2); :}

		| testing_expression:e1 LESS:l logical_expression:e2
//		{: RESULT = SemanticAnalyzer.checkRelationalExp(e1.toString(), l, e2); :}

		| testing_expression:e1 GTEQ:g logical_expression:e2
//		{: RESULT = SemanticAnalyzer.checkRelationalExp(e1.toString(), g, e2); :}

		| testing_expression:e1 LTEQ:l logical_expression:e2
//		{: RESULT = SemanticAnalyzer.checkRelationalExp(e1.toString(), l, e2); :}

		| testing_expression EQEQ logical_expression
		| testing_expression NOTEQ logical_expression;

logical_expression ::= bit_expression:be {:RESULT = be;:}
		| NOT bit_expression
		| logical_expression AND bit_expression
		| logical_expression ANDEQ bit_expression
		| logical_expression OR bit_expression
		| logical_expression OREQ bit_expression
		| logical_expression XOR bit_expression
		| logical_expression XOREQ bit_expression
		| logical_expression ANDAND bit_expression
		| logical_expression OROR bit_expression;

bit_expression ::= casting_expression:ce {:RESULT = ce;:}
		| bit_expression RSHIFTEQ casting_expression
		| bit_expression RSHIFT casting_expression
		| bit_expression LSHIFT casting_expression
		| bit_expression URSHIFT casting_expression
		| bit_expression LSHIFTEQ casting_expression;

casting_expression ::= creating_expression:ce {:RESULT = ce;:}
		| LPAREN type RPAREN creating_expression;

creating_expression ::= expression_end:e {:RESULT = e;:}
		| type LBRACK expression RBRACK bracks_e_aux
		| PLUSPLUS expression_end
		| MINUSMINUS expression_end
		| MINUS expression_end
		| creating_expression PLUSPLUS
		| creating_expression MINUSMINUS;

expression_end  ::= identifier:id {:RESULT = new Variable(id.toString(), null, "integer_literal", id);:}
		  parentheses_expression
		 | LBRACK expression RBRACK | literal:l {:RESULT = l;:};

argslist_e_aux ::= arglist;

arglist ::= expression | arglist COMMA expression;


parentheses_expression ::= LPAREN expression RPAREN;

statement ::= statement_variable_declaration
		| if_else_statement
		| if_statement
		| partial_statement_end
		| switch_statement
		| for_statement;

partial_statement_end ::= braced_statement
		| expression SEMICOLON
		| CONTINUE SEMICOLON
		| BREAK SEMICOLON
		| return_expression
		| no_statement;

braced_statement ::= LBRACE statements_within_braces_e_aux RBRACE;

statements_within_braces_e_aux ::= statements_within_braces;

statements_within_braces ::= statement_within_braces
		| statements_within_braces statement_within_braces;

statement_within_braces ::= statement;

no_statement ::= SEMICOLON;

return_expression ::= RETURN expression_e_aux SEMICOLON;

//#############condição##############//
if_else_statement ::= IF LPAREN expression RPAREN if_nested_statement ELSE statement;
if_nested_statement ::= partial_statement_end;
if_statement ::= IF LPAREN expression RPAREN statement;

//#############end condição##############//


//#############Laço for##############//
for_statement ::= FOR LPAREN for_statement_begin for_statement_others SEMICOLON for_statement_others RPAREN statement;
for_statement_begin ::= SEMICOLON | variable_declaration;
for_statement_others ::= expression_e_aux;
//#############end Laço for##############//


//#############switch case##############//
switch_statement ::= SWITCH LPAREN expression RPAREN LBRACE switch_cases_default RBRACE | SWITCH LPAREN expression RPAREN LBRACE RBRACE;
switch_cases_default ::= case_sentences | default_sentences | switch_cases_default statement;
case_sentences ::= case_sentence | switch_cases_default case_sentence;
case_sentence ::= CASE expression COLON;
default_sentences ::= default_sentence | switch_cases_default default_sentence;
default_sentence ::= DEFAULT COLON;
//############# end switch case##############//

//###################################################################################//
//###################################################################################//

parameter_e_aux ::= parameter_e;

parameter_e ::= parameter | parameter_e COMMA parameter;

statement_variable_declaration ::= variable_declarators:v SEMICOLON
		{:RESULT = new Variable(v.toString(), null, v) ;
                                 System.out.println("Variable declareted: " + v);
                          :}
		| variable_declarator_this_super SEMICOLON


	//	| variable_declarators:v SEMICOLON
	//	{: System.err.println("Variable not declareted, name: " + v);:}
		| EQUAL expression:e SEMICOLON
		{: System.err.println("SYNTACTIC ERROR: Missing package name or id at:  " + e );:}
	//	| type:t variable_declarators:v
	//	{: System.err.println("Missing semicolon at " + v);:}

		;
		
//################################## errors ############################
error1 ::= BREAK SEMICOLON {:
              System.err.println("SYNTACTIC ERROR: Break statement found, cannot use 'break' without an iteration");:};