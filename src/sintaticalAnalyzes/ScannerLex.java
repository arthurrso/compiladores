package sintaticalAnalyzes;


import java.io.*; 
import java_cup.runtime.*;


import java.lang.System;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 *  on 7/27/18 2:23 PM from the specification file
 * <tt>src/golang.flex</tt>
 */
public class ScannerLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\36\1\6\1\0\1\36\1\35\22\0\1\36\1\60\1\7"+
    "\2\0\1\74\1\56\1\22\1\61\1\62\1\40\1\17\1\73\1\20"+
    "\1\14\1\37\1\3\7\11\2\2\1\72\1\50\1\64\1\57\1\70"+
    "\2\0\4\4\1\16\1\4\16\1\1\25\2\1\1\13\2\1\1\65"+
    "\1\23\1\66\1\67\1\1\1\0\1\26\1\27\1\41\1\5\1\15"+
    "\1\30\1\52\1\54\1\21\1\1\1\42\1\43\1\46\1\31\1\47"+
    "\1\53\1\1\1\32\1\44\1\33\1\24\1\34\1\55\1\12\1\45"+
    "\1\1\1\71\1\63\1\51\54\0\1\1\12\0\1\1\4\0\1\1"+
    "\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0\5\1"+
    "\7\0\1\1\1\0\1\1\201\0\5\1\1\0\2\1\2\0\4\1"+
    "\10\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0\123\1"+
    "\1\0\213\1\10\0\236\1\11\0\46\1\2\0\1\1\7\0\47\1"+
    "\110\0\33\1\5\0\3\1\55\0\53\1\25\0\12\10\4\0\2\1"+
    "\1\0\143\1\1\0\1\1\17\0\2\1\7\0\2\1\12\10\3\1"+
    "\2\0\1\1\20\0\1\1\1\0\36\1\35\0\131\1\13\0\1\1"+
    "\16\0\12\10\41\1\11\0\2\1\4\0\1\1\5\0\26\1\4\0"+
    "\1\1\11\0\1\1\3\0\1\1\27\0\31\1\253\0\66\1\3\0"+
    "\1\1\22\0\1\1\7\0\12\1\4\0\12\10\1\0\7\1\1\0"+
    "\7\1\5\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0"+
    "\3\1\4\0\12\10\2\1\23\0\6\1\4\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0\4\1"+
    "\1\0\1\1\7\0\12\10\2\0\3\1\20\0\11\1\1\0\3\1"+
    "\1\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1"+
    "\22\0\1\1\17\0\2\1\4\0\12\10\25\0\10\1\2\0\2\1"+
    "\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1"+
    "\36\0\2\1\1\0\3\1\4\0\12\10\1\0\1\1\21\0\1\1"+
    "\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1"+
    "\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\26\0\1\1"+
    "\25\0\12\10\25\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1"+
    "\1\0\5\1\3\0\1\1\32\0\2\1\6\0\2\1\4\0\12\10"+
    "\25\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1"+
    "\3\0\1\1\40\0\1\1\1\0\2\1\4\0\12\10\1\0\2\1"+
    "\22\0\10\1\1\0\3\1\1\0\51\1\2\0\1\1\20\0\1\1"+
    "\21\0\2\1\4\0\12\10\12\0\6\1\5\0\22\1\3\0\30\1"+
    "\1\0\11\1\1\0\1\1\2\0\7\1\72\0\60\1\1\0\2\1"+
    "\14\0\7\1\11\0\12\10\47\0\2\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1"+
    "\11\0\1\1\2\0\5\1\1\0\1\1\11\0\12\10\2\0\2\1"+
    "\42\0\1\1\37\0\12\10\26\0\10\1\1\0\44\1\33\0\5\1"+
    "\163\0\53\1\24\0\1\1\12\10\6\0\6\1\4\0\4\1\3\0"+
    "\1\1\3\0\2\1\7\0\3\1\4\0\15\1\14\0\1\1\1\0"+
    "\12\10\6\0\46\1\12\0\53\1\1\0\1\1\3\0\u0149\1\1\0"+
    "\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\51\1\1\0"+
    "\4\1\2\0\41\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
    "\4\1\2\0\17\1\1\0\71\1\1\0\4\1\2\0\103\1\45\0"+
    "\20\1\20\0\125\1\14\0\u026c\1\2\0\21\1\1\0\32\1\5\0"+
    "\113\1\25\0\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0"+
    "\15\1\1\0\3\1\17\0\64\1\43\0\1\1\4\0\1\1\3\0"+
    "\12\10\46\0\12\10\6\0\130\1\10\0\51\1\1\0\1\1\5\0"+
    "\106\1\12\0\35\1\51\0\12\10\36\1\2\0\5\1\13\0\54\1"+
    "\25\0\7\1\10\0\12\10\46\0\27\1\11\0\65\1\53\0\12\10"+
    "\6\0\12\10\15\0\1\1\135\0\57\1\21\0\7\1\4\0\12\10"+
    "\51\0\36\1\15\0\2\1\12\10\6\0\46\1\32\0\44\1\34\0"+
    "\12\10\3\0\3\1\12\10\44\1\153\0\4\1\1\0\4\1\16\0"+
    "\300\1\100\0\u0116\1\2\0\6\1\2\0\46\1\2\0\6\1\2\0"+
    "\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\37\1\2\0"+
    "\65\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0"+
    "\4\1\2\0\6\1\4\0\15\1\5\0\3\1\1\0\7\1\164\0"+
    "\1\1\15\0\1\1\20\0\15\1\145\0\1\1\4\0\1\1\2\0"+
    "\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0"+
    "\1\1\64\0\2\1\u0a7b\0\57\1\1\0\57\1\1\0\205\1\6\0"+
    "\4\1\21\0\46\1\12\0\66\1\11\0\1\1\20\0\27\1\11\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\120\0\1\1\u01d5\0\2\1\52\0"+
    "\5\1\5\0\2\1\4\0\126\1\6\0\3\1\1\0\132\1\1\0"+
    "\4\1\5\0\51\1\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0"+
    "\u19b6\1\112\0\u51cc\1\64\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0"+
    "\20\1\12\10\2\1\24\0\57\1\20\0\31\1\10\0\106\1\61\0"+
    "\11\1\2\0\147\1\2\0\4\1\1\0\2\1\16\0\12\1\120\0"+
    "\10\1\1\0\3\1\1\0\4\1\1\0\27\1\35\0\64\1\16\0"+
    "\62\1\34\0\12\10\30\0\6\1\3\0\1\1\4\0\12\10\34\1"+
    "\12\0\27\1\31\0\35\1\7\0\57\1\34\0\1\1\12\10\46\0"+
    "\51\1\27\0\3\1\1\0\10\1\4\0\12\10\6\0\27\1\3\0"+
    "\1\1\5\0\60\1\1\0\1\1\3\0\2\1\2\0\5\1\2\0"+
    "\1\1\1\0\1\1\30\0\3\1\43\0\6\1\2\0\6\1\2\0"+
    "\6\1\11\0\7\1\1\0\7\1\221\0\43\1\15\0\12\10\6\0"+
    "\u2ba4\1\14\0\27\1\4\0\61\1\u2104\0\u012e\1\2\0\76\1\2\0"+
    "\152\1\46\0\7\1\14\0\5\1\5\0\1\1\1\0\12\1\1\0"+
    "\15\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0\14\1\164\0"+
    "\5\1\1\0\207\1\23\0\12\10\7\0\32\1\6\0\32\1\13\0"+
    "\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\2\1\4\1\1\1\5"+
    "\1\6\1\2\1\7\1\10\1\2\1\1\5\2\1\4"+
    "\1\11\1\12\3\2\1\13\1\14\2\2\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\5\1\35"+
    "\1\5\1\3\1\5\1\2\1\0\1\36\2\0\1\2"+
    "\1\37\1\40\1\41\1\2\2\0\1\36\1\0\10\2"+
    "\1\42\1\0\7\2\1\43\1\2\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\0\1\35\1\34\1\0\1\3\1\2\4\0\1\57"+
    "\2\2\1\60\1\36\2\0\1\60\2\0\3\2\1\61"+
    "\3\2\1\62\2\42\1\0\6\2\1\63\2\2\1\34"+
    "\2\2\4\0\1\64\1\2\4\0\1\2\1\65\3\2"+
    "\1\66\1\67\2\2\1\70\3\2\1\71\1\2\1\72"+
    "\1\2\1\0\1\2\1\0\1\73\2\2\1\74\1\2"+
    "\1\75\5\2\1\0\1\76\1\0\1\2\1\77\1\2"+
    "\1\100\1\101\1\102\4\2\1\103\2\2\1\104\5\2"+
    "\1\105\13\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\12\0\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\75\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\75\0\u0501"+
    "\0\u053e\0\u057b\0\75\0\75\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\75\0\75\0\u06e9\0\u0726\0\75\0\75\0\75"+
    "\0\u0763\0\75\0\u07a0\0\75\0\75\0\u07dd\0\u081a\0\u01ab"+
    "\0\u0857\0\u0894\0\u08d1\0\u090e\0\u016e\0\75\0\u094b\0\u0988"+
    "\0\u09c5\0\75\0\75\0\172\0\u0a02\0\u0a3f\0\u0a7c\0\u0a3f"+
    "\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\75\0\u0f7d"+
    "\0\75\0\u0fba\0\u0ff7\0\u08d1\0\u1034\0\u1071\0\u10ae\0\u10eb"+
    "\0\u1128\0\75\0\u1165\0\u11a2\0\u0a7c\0\u0a7c\0\u11df\0\u121c"+
    "\0\u0a3f\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\172\0\u138a"+
    "\0\u13c7\0\u1404\0\172\0\75\0\u1441\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u1572\0\u15af\0\u15ec\0\172\0\u1629\0\u1666\0\u16a3"+
    "\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\172\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\172\0\u19bc\0\u19f9"+
    "\0\u1a36\0\172\0\172\0\u1a73\0\u1ab0\0\172\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\172\0\u1ba4\0\172\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98"+
    "\0\172\0\u1cd5\0\u1d12\0\172\0\u1d4f\0\172\0\u1d8c\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\172\0\u1efa\0\u1f37\0\172"+
    "\0\u1f74\0\172\0\172\0\172\0\u1fb1\0\u1fee\0\u202b\0\u2068"+
    "\0\172\0\u20a5\0\u20e2\0\172\0\u211f\0\u215c\0\u2199\0\u21d6"+
    "\0\u2213\0\172\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381"+
    "\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569"+
    "\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751"+
    "\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939"+
    "\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21"+
    "\0\u2b5e\0\75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\4\2\3\1\12\1\13\1\3\1\14\1\15"+
    "\1\16\1\17\1\2\3\3\1\20\1\21\1\3\1\22"+
    "\1\23\1\24\1\25\1\7\1\26\1\27\1\30\2\3"+
    "\1\31\1\3\1\32\1\3\1\33\1\34\1\35\1\36"+
    "\2\3\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\76\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\11\3\4\0\7\3\2\0\4\3\20\0\1\11"+
    "\2\4\2\11\2\0\1\11\1\4\2\11\1\56\2\57"+
    "\2\0\1\60\2\0\11\11\4\0\7\11\2\0\4\11"+
    "\20\0\1\11\1\61\1\62\2\11\2\0\1\11\1\62"+
    "\2\63\1\56\2\57\2\0\1\60\2\0\11\11\4\0"+
    "\7\11\2\0\4\11\20\0\5\3\2\0\4\3\1\0"+
    "\1\64\1\3\2\0\1\3\2\0\11\3\4\0\7\3"+
    "\2\0\4\3\17\0\6\65\1\0\1\66\13\65\1\67"+
    "\51\65\1\0\5\11\2\0\4\11\1\0\2\11\2\0"+
    "\1\11\2\0\11\11\4\0\7\11\2\0\4\11\21\0"+
    "\2\56\5\0\1\56\2\0\1\70\61\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\4\0"+
    "\2\3\1\71\4\3\2\0\4\3\36\0\1\72\75\0"+
    "\1\73\55\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\4\3\1\74\4\3\4\0\5\3\1\75"+
    "\1\3\2\0\4\3\17\0\6\76\1\77\13\76\1\100"+
    "\1\101\51\76\1\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\6\3\1\102\2\3\4\0\7\3"+
    "\2\0\4\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\1\103\1\3\1\104\6\3\4\0"+
    "\6\3\1\105\2\0\4\3\20\0\5\3\2\0\4\3"+
    "\1\0\1\106\1\3\2\0\1\3\2\0\2\3\1\107"+
    "\6\3\4\0\7\3\2\0\4\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\4\0"+
    "\4\3\1\110\2\3\2\0\4\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\2\3\1\111"+
    "\6\3\4\0\7\3\2\0\4\3\25\0\1\7\125\0"+
    "\1\112\1\113\35\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\2\3\1\114\6\3\4\0\6\3"+
    "\1\115\2\0\2\3\1\116\1\3\20\0\5\3\2\0"+
    "\4\3\1\0\1\117\1\3\2\0\1\3\2\0\7\3"+
    "\1\120\1\3\4\0\7\3\2\0\3\3\1\121\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\2\3\1\122\6\3\4\0\7\3\2\0\4\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\4\0\6\3\1\123\2\0\4\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\2\3"+
    "\1\124\6\3\4\0\7\3\2\0\4\3\75\0\1\125"+
    "\10\0\1\126\64\0\1\127\74\0\1\130\100\0\1\131"+
    "\31\0\1\132\36\0\1\133\4\0\1\134\67\0\1\135"+
    "\10\0\1\136\63\0\1\137\17\0\2\56\5\0\1\56"+
    "\3\0\2\140\2\0\1\141\54\0\1\11\2\142\2\11"+
    "\2\0\1\11\1\142\2\11\1\0\2\11\2\143\1\11"+
    "\2\0\11\11\4\0\7\11\2\0\4\11\20\0\1\11"+
    "\2\61\2\11\2\0\1\11\1\61\2\11\1\56\2\57"+
    "\2\0\1\60\2\0\11\11\4\0\7\11\2\0\4\11"+
    "\20\0\1\11\1\61\1\62\2\11\2\0\1\11\1\62"+
    "\2\11\1\56\2\57\2\0\1\60\2\0\11\11\4\0"+
    "\7\11\2\0\4\11\20\0\1\11\4\144\2\0\1\11"+
    "\1\144\2\11\1\0\2\144\2\0\1\11\2\0\2\11"+
    "\3\144\4\11\4\0\1\144\6\11\2\0\4\11\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\4\3\1\145\4\3\4\0\7\3\2\0\4\3\22\0"+
    "\1\146\3\0\1\65\1\0\1\146\1\147\7\0\2\65"+
    "\1\150\1\151\7\65\54\0\1\152\61\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\4\0"+
    "\3\3\1\153\3\3\2\0\4\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\4\0"+
    "\7\3\2\0\1\3\1\154\2\3\17\0\22\77\1\155"+
    "\74\77\1\156\55\77\1\157\3\77\1\76\1\77\1\157"+
    "\1\160\7\77\1\161\1\76\1\162\1\163\7\76\40\77"+
    "\1\0\5\3\2\0\4\3\1\0\1\164\1\3\2\0"+
    "\1\3\2\0\11\3\4\0\7\3\2\0\4\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\5\3\1\165\3\3\4\0\7\3\2\0\4\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\4\0\2\3\1\166\4\3\2\0\4\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\6\3\1\167\2\3\4\0\7\3\2\0\4\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\7\3\1\170\1\3\4\0\7\3\2\0\4\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\5\3\1\171\3\3\4\0\7\3\2\0\4\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\4\0\7\3\2\0\1\3\1\172\2\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\6\3\1\173\2\3\4\0\7\3\2\0\4\3\17\0"+
    "\6\112\1\174\26\112\1\175\37\112\40\113\1\176\34\113"+
    "\1\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\11\3\4\0\3\3\1\177\3\3\2\0\4\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\5\3\1\200\3\3\4\0\7\3\2\0\4\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\2\3\1\201\6\3\4\0\7\3\2\0\4\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\11\3\4\0\2\3\1\202\4\3\2\0\4\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\6\3\1\203\2\3\4\0\7\3\2\0\4\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\204"+
    "\2\0\11\3\4\0\7\3\2\0\4\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\11\3"+
    "\4\0\7\3\2\0\1\3\1\205\2\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\7\3"+
    "\1\206\1\3\4\0\7\3\2\0\4\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\11\3"+
    "\4\0\1\207\6\3\2\0\4\3\21\0\2\210\5\0"+
    "\1\210\5\0\2\143\55\0\1\11\2\142\2\11\2\0"+
    "\1\11\1\142\2\11\1\0\2\11\2\0\1\60\2\0"+
    "\11\11\4\0\7\11\2\0\4\11\21\0\2\210\5\0"+
    "\1\210\64\0\5\3\2\0\4\3\1\0\1\211\1\3"+
    "\2\0\1\3\2\0\2\3\1\212\6\3\4\0\7\3"+
    "\2\0\4\3\22\0\1\213\5\0\1\213\65\0\4\214"+
    "\3\0\1\214\3\0\2\214\7\0\3\214\10\0\1\214"+
    "\35\0\4\215\3\0\1\215\3\0\2\215\7\0\3\215"+
    "\10\0\1\215\35\0\4\216\3\0\1\216\3\0\2\216"+
    "\7\0\3\216\10\0\1\216\34\0\5\3\2\0\4\3"+
    "\1\0\1\217\1\3\2\0\1\3\2\0\11\3\4\0"+
    "\7\3\2\0\4\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\4\0\6\3\1\220"+
    "\2\0\4\3\17\0\3\77\1\221\5\77\1\221\10\77"+
    "\1\156\54\77\4\222\3\77\1\222\3\77\2\222\3\77"+
    "\1\156\3\77\3\222\10\77\1\222\35\77\4\223\3\77"+
    "\1\223\3\77\2\223\3\77\1\156\3\77\3\223\10\77"+
    "\1\223\35\77\4\224\3\77\1\224\3\77\2\224\3\77"+
    "\1\156\3\77\3\224\10\77\1\224\33\77\1\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\2\3"+
    "\1\225\6\3\4\0\7\3\2\0\4\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\11\3"+
    "\4\0\1\226\6\3\2\0\4\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\4\0"+
    "\2\3\1\227\4\3\2\0\4\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\1\230\10\3"+
    "\4\0\7\3\2\0\4\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\11\3\4\0\7\3"+
    "\2\0\1\231\3\3\20\0\5\3\2\0\4\3\1\0"+
    "\1\232\1\3\2\0\1\3\2\0\11\3\4\0\7\3"+
    "\2\0\4\3\25\0\1\174\66\0\37\113\1\174\1\176"+
    "\34\113\1\0\5\3\2\0\4\3\1\0\1\233\1\3"+
    "\2\0\1\3\2\0\11\3\4\0\7\3\2\0\4\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\7\3\1\234\1\3\4\0\3\3\1\235\3\3"+
    "\2\0\4\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\5\3\1\236\3\3\4\0\7\3"+
    "\2\0\4\3\20\0\5\3\2\0\4\3\1\0\1\237"+
    "\1\3\2\0\1\3\2\0\11\3\4\0\7\3\2\0"+
    "\4\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\1\240\10\3\4\0\7\3\2\0\4\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\7\3\1\241\1\3\4\0\7\3\2\0\4\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\11\3\4\0\6\3\1\242\2\0\4\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\4\0\1\3\1\243\5\3\2\0\4\3\21\0"+
    "\2\210\5\0\1\210\7\0\1\141\54\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\6\3\1\244"+
    "\2\3\4\0\7\3\2\0\4\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\1\245\10\3"+
    "\4\0\7\3\2\0\4\3\22\0\1\65\5\0\1\65"+
    "\65\0\4\65\3\0\1\65\3\0\2\65\7\0\3\65"+
    "\10\0\1\65\35\0\4\147\3\0\1\147\3\0\2\147"+
    "\7\0\3\147\10\0\1\147\35\0\4\246\3\0\1\246"+
    "\3\0\2\246\7\0\3\246\10\0\1\246\34\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\6\3"+
    "\1\247\2\3\4\0\7\3\2\0\4\3\17\0\3\77"+
    "\1\76\5\77\1\76\10\77\1\156\54\77\4\76\3\77"+
    "\1\76\3\77\2\76\3\77\1\156\3\77\3\76\10\77"+
    "\1\76\35\77\4\160\3\77\1\160\3\77\2\160\3\77"+
    "\1\156\3\77\3\160\10\77\1\160\35\77\4\250\3\77"+
    "\1\250\3\77\2\250\3\77\1\156\3\77\3\250\10\77"+
    "\1\250\33\77\1\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\11\3\4\0\1\3\1\251\5\3"+
    "\2\0\4\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\7\3\1\252\1\3\4\0\7\3"+
    "\2\0\4\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\6\3\1\253\2\3\4\0\7\3"+
    "\2\0\4\3\20\0\5\3\2\0\4\3\1\0\1\254"+
    "\1\3\2\0\1\3\2\0\11\3\4\0\7\3\2\0"+
    "\4\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\255\2\0\11\3\4\0\7\3\2\0\4\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\7\3\1\256\1\3\4\0\7\3\2\0\4\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\4\0\1\257\6\3\2\0\4\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\11\3"+
    "\4\0\1\260\6\3\2\0\4\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\4\0"+
    "\1\261\6\3\2\0\4\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\2\3\1\262\6\3"+
    "\4\0\7\3\2\0\4\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\11\3\4\0\2\3"+
    "\1\263\4\3\2\0\4\3\21\0\4\264\3\0\1\264"+
    "\3\0\2\264\7\0\3\264\10\0\1\264\34\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\7\3"+
    "\1\265\1\3\4\0\7\3\2\0\4\3\17\0\2\77"+
    "\4\266\3\77\1\266\3\77\2\266\3\77\1\156\3\77"+
    "\3\266\10\77\1\266\33\77\1\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\11\3\4\0\7\3"+
    "\2\0\2\3\1\267\1\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\5\3\1\270\3\3"+
    "\4\0\7\3\2\0\4\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\5\3\1\271\3\3"+
    "\4\0\7\3\2\0\4\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\7\3\1\272\1\3"+
    "\4\0\7\3\2\0\4\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\7\3\1\273\1\3"+
    "\4\0\7\3\2\0\4\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\11\3\4\0\7\3"+
    "\2\0\2\3\1\274\1\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\11\3\4\0\7\3"+
    "\2\0\1\275\3\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\7\3\1\276\1\3\4\0"+
    "\7\3\2\0\4\3\21\0\4\150\3\0\1\150\3\0"+
    "\2\150\7\0\3\150\10\0\1\150\33\0\2\77\4\162"+
    "\3\77\1\162\3\77\2\162\3\77\1\156\3\77\3\162"+
    "\10\77\1\162\33\77\1\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\6\3\1\277\2\3\4\0"+
    "\7\3\2\0\4\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\1\300\10\3\4\0\7\3"+
    "\2\0\4\3\20\0\5\3\2\0\4\3\1\0\1\301"+
    "\1\3\2\0\1\3\2\0\11\3\4\0\7\3\2\0"+
    "\4\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\6\3\1\302\2\3\4\0\7\3\2\0"+
    "\4\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\11\3\4\0\6\3\1\303\2\0\4\3"+
    "\20\0\5\3\2\0\4\3\1\0\1\304\1\3\2\0"+
    "\1\3\2\0\11\3\4\0\7\3\2\0\4\3\20\0"+
    "\5\3\2\0\4\3\1\0\1\305\1\3\2\0\1\3"+
    "\2\0\11\3\4\0\7\3\2\0\4\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\1\306"+
    "\10\3\4\0\7\3\2\0\4\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\7\3\1\307"+
    "\1\3\4\0\7\3\2\0\4\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\4\0"+
    "\7\3\2\0\1\310\3\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\1\311\10\3\4\0"+
    "\7\3\2\0\4\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\4\0\7\3\2\0"+
    "\2\3\1\312\1\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\6\3\1\313\2\3\4\0"+
    "\7\3\2\0\4\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\5\3\1\314\3\3\4\0"+
    "\7\3\2\0\4\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\4\0\3\3\1\315"+
    "\3\3\2\0\4\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\4\0\4\3\1\316"+
    "\2\3\2\0\4\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\4\0\5\3\1\317"+
    "\1\3\2\0\4\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\3\3\1\320\5\3\4\0"+
    "\7\3\2\0\4\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\4\0\6\3\1\321"+
    "\2\0\4\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\11\3\4\0\2\3\1\322\4\3"+
    "\2\0\4\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\11\3\4\0\3\3\1\323\3\3"+
    "\2\0\4\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\11\3\4\0\4\3\1\324\2\3"+
    "\2\0\4\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\11\3\4\0\5\3\1\325\1\3"+
    "\2\0\4\3\17\0\1\326\5\327\1\0\1\326\4\327"+
    "\1\326\2\327\2\326\1\327\2\326\11\327\4\326\7\327"+
    "\2\326\4\327\17\326\5\0\1\330\70\0\4\3\1\331"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\11\3"+
    "\4\0\7\3\2\0\4\3\34\0\1\332\60\0\5\3"+
    "\2\0\4\3\1\0\1\333\1\3\2\0\1\3\2\0"+
    "\11\3\4\0\7\3\2\0\4\3\47\0\1\334\45\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\4\3\1\335\4\3\4\0\7\3\2\0\4\3\45\0"+
    "\1\336\47\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\2\3\1\337\6\3\4\0\7\3\2\0"+
    "\4\3\43\0\1\340\51\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\1\341\10\3\4\0\7\3"+
    "\2\0\4\3\62\0\1\342\32\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\11\3\4\0\2\3"+
    "\1\343\4\3\2\0\4\3\52\0\1\344\42\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\7\3"+
    "\1\345\1\3\4\0\7\3\2\0\4\3\24\0\1\346"+
    "\70\0\4\3\1\347\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\11\3\4\0\7\3\2\0\4\3\67\0"+
    "\1\350\25\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\11\3\4\0\7\3\1\350\1\0\4\3"+
    "\70\0\1\351\44\0\1\352\104\0\1\353\76\0\1\354"+
    "\56\0\1\355\111\0\1\356\72\0\1\357\72\0\1\360"+
    "\107\0\1\361\50\0\1\362\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11163];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\17\1\1\11\3\1\2\11"+
    "\5\1\2\11\2\1\3\11\1\1\1\11\1\1\2\11"+
    "\7\1\1\0\1\11\2\0\1\1\2\11\2\1\2\0"+
    "\1\1\1\0\11\1\1\0\11\1\13\11\1\0\1\11"+
    "\1\1\1\0\2\1\4\0\1\11\4\1\2\0\1\1"+
    "\2\0\10\1\1\11\1\1\1\0\14\1\4\0\2\1"+
    "\4\0\21\1\1\0\1\1\1\0\13\1\1\0\1\1"+
    "\1\0\37\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
/* To create a new java_cup.runtime.Symbol with information about
the current symbol, the symbol will have no value in this
case. */
private Symbol symbol(int type) {
 // System.out.println("return "+type);
 return new Symbol(type, yyline, yycolumn);
}
/* Also creates a new java_cup.runtime.Symbol with information
about the current symbol, but this object has a value. */
private Symbol symbol(int type, Object value) {
 // System.out.println("return "+type);
 return new Symbol(type, yyline, yycolumn, value);
}

   StringBuffer token_stream = new StringBuffer();
   StringBuffer code_stream = new StringBuffer();
   public void append_tokens_to_file()
   {
      /*if(code_stream.length() == 0)
      {
        code_stream.append("\n");
        return;
      }
      String content = code_stream.toString() + "   //  "+ token_stream.toString()+"\n";
      System.out.print(content);
      
      try
      {
        File file = new File("output.go");
   
        // if file doesnt exists, then create it
        if (!file.exists()) 
        {
          file.createNewFile();
        }
   
        FileWriter fw = new FileWriter(file.getAbsoluteFile(),true);
        BufferedWriter bw = new BufferedWriter(fw);
        bw.write(content);
        bw.close();
        code_stream.setLength(0);
        token_stream.setLength(0);
      }
      catch (IOException e) 
      {
        e.printStackTrace();
      }*/
   }
   public void append_code(String code)
   {
      //code_stream.append(code);
   }
   public void append_token(String token_type)
   {
     //token_stream.append(token_type + " ");
   }
   public Symbol gprint (int type) 
   {
      int line_no = yyline+1;
   		switch (type)
   		{
   			case 1:
          append_token("Identifier");
          //return symbol(sym.identifier);
   				//System.out.print("Identifier_"+yytext()+" \n");
   				break;
   			case 2:
          append_token("Keyword");
   				//System.out.print("Keyword \n");
   				break;
   			case 3:
          append_token("O&D");  // fine graining it...
   	
       				break;

   			case 41:
          append_token("int_lit");
    			break;
        case 42:
          append_token("float_lit");
          break;
        case 43:
          append_token("imaginary_lit");
          break;
        case 44:
          append_token("rune_lit");
          break;
        case 45:
          append_token("string_lit");
          break;

        case 5:
          append_token("Type");
          break;
        case 6:
          append_token("Constant");
          break;
        case 7:
            append_token("Zero_value");
        case 8:
            append_token("Function");
            break;
        case 9:
            break;//pseudo-case for whitespace
        case -2:
            System.out.println("ERROR: Numeric Literal followed by letter at line "+line_no);
            break;
   			default:
            System.out.println("ERROR");
   				  System.out.print("ERROR \n");
            return symbol(sym.error);
   		}
      append_code(yytext());
   		return symbol(sym.EOF);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScannerLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1700) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { return symbol(sym.importd);
          }
        case 71: break;
        case 34: 
          { /* ignore */
          }
        case 72: break;
        case 21: 
          { return symbol(sym.close_square_brac);
          }
        case 73: break;
        case 38: 
          { return symbol(sym.equal_equal_op);
          }
        case 74: break;
        case 27: 
          { return symbol(sym.mod_op);
          }
        case 75: break;
        case 29: 
          { return symbol(sym.imaginary_lit, yytext());
          }
        case 76: break;
        case 10: 
          { return symbol(sym.star_op);
          }
        case 77: break;
        case 49: 
          { return symbol(sym.ford);
          }
        case 78: break;
        case 48: 
          { return symbol(sym.rune_lit, yytext());
          }
        case 79: break;
        case 22: 
          { return symbol(sym.pow_op);
          }
        case 80: break;
        case 12: 
          { return symbol(sym.close_curly_brac);
          }
        case 81: break;
        case 36: 
          { return symbol(sym.and_op);
          }
        case 82: break;
        case 35: 
          { return symbol(sym.go);
          }
        case 83: break;
        case 68: 
          { return symbol(sym.continued);
          }
        case 84: break;
        case 26: 
          { return symbol(sym.comma);
          }
        case 85: break;
        case 50: 
          { return symbol(sym.var);
          }
        case 86: break;
        case 31: 
          { return symbol(sym.inc_op);
          }
        case 87: break;
        case 41: 
          { return symbol(sym.chan_op);
          }
        case 88: break;
        case 18: 
          { return symbol(sym.pipe_op);
          }
        case 89: break;
        case 69: 
          { return symbol(sym.fallthrough);
          }
        case 90: break;
        case 24: 
          { return symbol(sym.open_curly_brac);
          }
        case 91: break;
        case 13: 
          { return symbol(sym.amp_op);
          }
        case 92: break;
        case 44: 
          { return symbol(sym.greater_equal_op);
          }
        case 93: break;
        case 8: 
          { return symbol(sym.minus_op);
          }
        case 94: break;
        case 56: 
          { return symbol(sym.chan);
          }
        case 95: break;
        case 65: 
          { return symbol(sym.struct);
          }
        case 96: break;
        case 3: 
          { return symbol(sym.int_lit, yytext());
          }
        case 97: break;
        case 52: 
          { return symbol(sym.elsed);
          }
        case 98: break;
        case 16: 
          { return symbol(sym.open_brac);
          }
        case 99: break;
        case 15: 
          { return symbol(sym.not_op);
          }
        case 100: break;
        case 61: 
          { return symbol(sym.constd);
          }
        case 101: break;
        case 2: 
          { return symbol(sym.identifier, yytext());
          }
        case 102: break;
        case 67: 
          { return symbol(sym.packaged);
          }
        case 103: break;
        case 33: 
          { return symbol(sym.ifd);
          }
        case 104: break;
        case 28: 
          { return symbol(sym.float_lit, yytext());
          }
        case 105: break;
        case 19: 
          { return symbol(sym.less_op);
          }
        case 106: break;
        case 20: 
          { return symbol(sym.open_square_brac);
          }
        case 107: break;
        case 39: 
          { return symbol(sym.not_equal_op);
          }
        case 108: break;
        case 53: 
          { return symbol(sym.funcd);
          }
        case 109: break;
        case 23: 
          { return symbol(sym.greater_op);
          }
        case 110: break;
        case 64: 
          { return symbol(sym.select);
          }
        case 111: break;
        case 43: 
          { return symbol(sym.left_shift_op);
          }
        case 112: break;
        case 9: 
          { return symbol(sym.div_op);
          }
        case 113: break;
        case 17: 
          { return symbol(sym.close_brac);
          }
        case 114: break;
        case 54: 
          { return symbol(sym.type);
          }
        case 115: break;
        case 6: 
          { return symbol(sym.dot);
          }
        case 116: break;
        case 4: 
          { /* ignore */ gprint(9);
          }
        case 117: break;
        case 58: 
          { return symbol(sym.defer);
          }
        case 118: break;
        case 40: 
          { return symbol(sym.or_op);
          }
        case 119: break;
        case 55: 
          { return symbol(sym.cased);
          }
        case 120: break;
        case 11: 
          { return symbol(sym.semicolon);
          }
        case 121: break;
        case 47: 
          { return symbol(sym.tri_dot);
          }
        case 122: break;
        case 46: 
          { return symbol(sym.short_ass);
          }
        case 123: break;
        case 7: 
          { return symbol(sym.plus_op);
          }
        case 124: break;
        case 30: 
          { return symbol(sym.string_lit, yytext());
          }
        case 125: break;
        case 57: 
          { return symbol(sym.gotod);
          }
        case 126: break;
        case 25: 
          { return symbol(sym.colon);
          }
        case 127: break;
        case 66: 
          { return symbol(sym.switchd);
          }
        case 128: break;
        case 60: 
          { return symbol(sym.range);
          }
        case 129: break;
        case 32: 
          { return symbol(sym.dec_op);
          }
        case 130: break;
        case 63: 
          { return symbol(sym.returnd);
          }
        case 131: break;
        case 14: 
          { return symbol(sym.equal);
          }
        case 132: break;
        case 37: 
          { return symbol(sym.amp_pow_op);
          }
        case 133: break;
        case 5: 
          { gprint(-2);
          }
        case 134: break;
        case 59: 
          { return symbol(sym.breakd);
          }
        case 135: break;
        case 51: 
          { return symbol(sym.map);
          }
        case 136: break;
        case 45: 
          { return symbol(sym.right_shift_op);
          }
        case 137: break;
        case 42: 
          { return symbol(sym.less_equal_op);
          }
        case 138: break;
        case 70: 
          { return symbol(sym.interfaced);
          }
        case 139: break;
        case 1: 
          { gprint(-1);/*Illegeal Character*/
          }
        case 140: break;
        case 141:
          { return symbol(sym.inter_op);
          }
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbol(sym.EOF) ;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
